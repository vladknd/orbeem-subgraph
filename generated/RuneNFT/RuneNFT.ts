// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LeveledUp extends ethereum.Event {
  get params(): LeveledUp__Params {
    return new LeveledUp__Params(this);
  }
}

export class LeveledUp__Params {
  _event: LeveledUp;

  constructor(event: LeveledUp) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get level(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RuneCreated extends ethereum.Event {
  get params(): RuneCreated__Params {
    return new RuneCreated__Params(this);
  }
}

export class RuneCreated__Params {
  _event: RuneCreated;

  constructor(event: RuneCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenURI(): string {
    return this._event.parameters[2].value.toString();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get level(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get power(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get durability(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get intelligence(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class RuneInitialized extends ethereum.Event {
  get params(): RuneInitialized__Params {
    return new RuneInitialized__Params(this);
  }
}

export class RuneInitialized__Params {
  _event: RuneInitialized;

  constructor(event: RuneInitialized) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get game(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatedAttributes extends ethereum.Event {
  get params(): UpdatedAttributes__Params {
    return new UpdatedAttributes__Params(this);
  }
}

export class UpdatedAttributes__Params {
  _event: UpdatedAttributes;

  constructor(event: UpdatedAttributes) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get power(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get durability(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get intelligence(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class RuneNFT__getBaseAttributesResultBaseStruct extends ethereum.Tuple {
  get power(): i32 {
    return this[0].toI32();
  }

  get durability(): i32 {
    return this[1].toI32();
  }

  get intelligence(): i32 {
    return this[2].toI32();
  }
}

export class RuneNFT__getCurrentAttributesResultCurrentAttributesStruct extends ethereum.Tuple {
  get power(): i32 {
    return this[0].toI32();
  }

  get durability(): i32 {
    return this[1].toI32();
  }

  get intelligence(): i32 {
    return this[2].toI32();
  }
}

export class RuneNFT__updateAttributesResultNewAttributesStruct extends ethereum.Tuple {
  get power(): i32 {
    return this[0].toI32();
  }

  get durability(): i32 {
    return this[1].toI32();
  }

  get intelligence(): i32 {
    return this[2].toI32();
  }
}

export class RuneNFT extends ethereum.SmartContract {
  static bind(address: Address): RuneNFT {
    return new RuneNFT("RuneNFT", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createRune(
    _uri: string,
    _power: i32,
    _durability: i32,
    _intelligence: i32
  ): BigInt {
    let result = super.call(
      "createRune",
      "createRune(string,uint8,uint8,uint8):(uint256)",
      [
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_power)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_durability)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_intelligence))
      ]
    );

    return result[0].toBigInt();
  }

  try_createRune(
    _uri: string,
    _power: i32,
    _durability: i32,
    _intelligence: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createRune",
      "createRune(string,uint8,uint8,uint8):(uint256)",
      [
        ethereum.Value.fromString(_uri),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_power)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_durability)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_intelligence))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseAttributes(
    _tokenId: BigInt
  ): RuneNFT__getBaseAttributesResultBaseStruct {
    let result = super.call(
      "getBaseAttributes",
      "getBaseAttributes(uint256):((uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return changetype<RuneNFT__getBaseAttributesResultBaseStruct>(
      result[0].toTuple()
    );
  }

  try_getBaseAttributes(
    _tokenId: BigInt
  ): ethereum.CallResult<RuneNFT__getBaseAttributesResultBaseStruct> {
    let result = super.tryCall(
      "getBaseAttributes",
      "getBaseAttributes(uint256):((uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<RuneNFT__getBaseAttributesResultBaseStruct>(value[0].toTuple())
    );
  }

  getCurrentAttributes(
    _tokenId: BigInt
  ): RuneNFT__getCurrentAttributesResultCurrentAttributesStruct {
    let result = super.call(
      "getCurrentAttributes",
      "getCurrentAttributes(uint256):((uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return changetype<
      RuneNFT__getCurrentAttributesResultCurrentAttributesStruct
    >(result[0].toTuple());
  }

  try_getCurrentAttributes(
    _tokenId: BigInt
  ): ethereum.CallResult<
    RuneNFT__getCurrentAttributesResultCurrentAttributesStruct
  > {
    let result = super.tryCall(
      "getCurrentAttributes",
      "getCurrentAttributes(uint256):((uint8,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<RuneNFT__getCurrentAttributesResultCurrentAttributesStruct>(
        value[0].toTuple()
      )
    );
  }

  getLevel(_tokenId: BigInt): i32 {
    let result = super.call("getLevel", "getLevel(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toI32();
  }

  try_getLevel(_tokenId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getLevel", "getLevel(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateAttributes(
    _tokenId: BigInt,
    _newPower: i32,
    _newDurability: i32,
    _newIntelligence: i32
  ): RuneNFT__updateAttributesResultNewAttributesStruct {
    let result = super.call(
      "updateAttributes",
      "updateAttributes(uint256,uint8,uint8,uint8):((uint8,uint8,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_newPower)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_newDurability)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_newIntelligence))
      ]
    );

    return changetype<RuneNFT__updateAttributesResultNewAttributesStruct>(
      result[0].toTuple()
    );
  }

  try_updateAttributes(
    _tokenId: BigInt,
    _newPower: i32,
    _newDurability: i32,
    _newIntelligence: i32
  ): ethereum.CallResult<RuneNFT__updateAttributesResultNewAttributesStruct> {
    let result = super.tryCall(
      "updateAttributes",
      "updateAttributes(uint256,uint8,uint8,uint8):((uint8,uint8,uint8))",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_newPower)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_newDurability)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_newIntelligence))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<RuneNFT__updateAttributesResultNewAttributesStruct>(
        value[0].toTuple()
      )
    );
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CreateRuneCall extends ethereum.Call {
  get inputs(): CreateRuneCall__Inputs {
    return new CreateRuneCall__Inputs(this);
  }

  get outputs(): CreateRuneCall__Outputs {
    return new CreateRuneCall__Outputs(this);
  }
}

export class CreateRuneCall__Inputs {
  _call: CreateRuneCall;

  constructor(call: CreateRuneCall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _power(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _durability(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _intelligence(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateRuneCall__Outputs {
  _call: CreateRuneCall;

  constructor(call: CreateRuneCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _marketAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _orbAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LevelUpCall extends ethereum.Call {
  get inputs(): LevelUpCall__Inputs {
    return new LevelUpCall__Inputs(this);
  }

  get outputs(): LevelUpCall__Outputs {
    return new LevelUpCall__Outputs(this);
  }
}

export class LevelUpCall__Inputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LevelUpCall__Outputs {
  _call: LevelUpCall;

  constructor(call: LevelUpCall) {
    this._call = call;
  }

  get newLevel(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAttributesCall extends ethereum.Call {
  get inputs(): UpdateAttributesCall__Inputs {
    return new UpdateAttributesCall__Inputs(this);
  }

  get outputs(): UpdateAttributesCall__Outputs {
    return new UpdateAttributesCall__Outputs(this);
  }
}

export class UpdateAttributesCall__Inputs {
  _call: UpdateAttributesCall;

  constructor(call: UpdateAttributesCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newPower(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _newDurability(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _newIntelligence(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class UpdateAttributesCall__Outputs {
  _call: UpdateAttributesCall;

  constructor(call: UpdateAttributesCall) {
    this._call = call;
  }

  get newAttributes(): UpdateAttributesCallNewAttributesStruct {
    return changetype<UpdateAttributesCallNewAttributesStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class UpdateAttributesCallNewAttributesStruct extends ethereum.Tuple {
  get power(): i32 {
    return this[0].toI32();
  }

  get durability(): i32 {
    return this[1].toI32();
  }

  get intelligence(): i32 {
    return this[2].toI32();
  }
}
